// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// replace
NumericMatrix replace(NumericMatrix mat, IntegerMatrix idx, NumericVector update);
RcppExport SEXP _bnbc_replace(SEXP matSEXP, SEXP idxSEXP, SEXP updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type update(updateSEXP);
    rcpp_result_gen = Rcpp::wrap(replace(mat, idx, update));
    return rcpp_result_gen;
END_RCPP
}
// updateBand
List updateBand(List tact_list, IntegerMatrix idx, NumericMatrix band);
RcppExport SEXP _bnbc_updateBand(SEXP tact_listSEXP, SEXP idxSEXP, SEXP bandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type tact_list(tact_listSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type band(bandSEXP);
    rcpp_result_gen = Rcpp::wrap(updateBand(tact_list, idx, band));
    return rcpp_result_gen;
END_RCPP
}
// getBandIdxC
IntegerMatrix getBandIdxC(int n, int band_no);
RcppExport SEXP _bnbc_getBandIdxC(SEXP nSEXP, SEXP band_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type band_no(band_noSEXP);
    rcpp_result_gen = Rcpp::wrap(getBandIdxC(n, band_no));
    return rcpp_result_gen;
END_RCPP
}
// getSeq
IntegerVector getSeq(int a, int b);
RcppExport SEXP _bnbc_getSeq(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(getSeq(a, b));
    return rcpp_result_gen;
END_RCPP
}
// updateBands
List updateBands(List tact_list, int n, int bstart, int nbands, List band_mats);
RcppExport SEXP _bnbc_updateBands(SEXP tact_listSEXP, SEXP nSEXP, SEXP bstartSEXP, SEXP nbandsSEXP, SEXP band_matsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type tact_list(tact_listSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type bstart(bstartSEXP);
    Rcpp::traits::input_parameter< int >::type nbands(nbandsSEXP);
    Rcpp::traits::input_parameter< List >::type band_mats(band_matsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateBands(tact_list, n, bstart, nbands, band_mats));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bnbc_replace", (DL_FUNC) &_bnbc_replace, 3},
    {"_bnbc_updateBand", (DL_FUNC) &_bnbc_updateBand, 3},
    {"_bnbc_getBandIdxC", (DL_FUNC) &_bnbc_getBandIdxC, 2},
    {"_bnbc_getSeq", (DL_FUNC) &_bnbc_getSeq, 2},
    {"_bnbc_updateBands", (DL_FUNC) &_bnbc_updateBands, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_bnbc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
